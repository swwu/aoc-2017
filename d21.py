import collections

instr = """../.. => .../#../#..
#./.. => ###/#.#/.#.
##/.. => ###/.##/##.
.#/#. => .#./..#/...
##/#. => ##./.##/#..
##/## => #.#/###/.##
.../.../... => #.#./.#.#/#.#./###.
#../.../... => #..#/.###/##../##..
.#./.../... => #.##/####/.###/....
##./.../... => ####/.#../#.##/#.##
#.#/.../... => ..../#.../.##./#.##
###/.../... => .###/.#../...#/.#..
.#./#../... => .###/#..#/#.../#...
##./#../... => ..##/...#/#.##/..##
..#/#../... => #.##/.#../...#/..##
#.#/#../... => #.##/..##/..../##.#
.##/#../... => .###/.###/#.../....
###/#../... => #.../####/.#.#/....
.../.#./... => ...#/##.#/...#/###.
#../.#./... => #.#./####/.#../##.#
.#./.#./... => #..#/.##./..##/...#
##./.#./... => ###./#.#./#.../###.
#.#/.#./... => ..#./###./####/.#.#
###/.#./... => .#.#/#..#/..#./#..#
.#./##./... => ####/##../##../..##
##./##./... => #.../..##/#.#./....
..#/##./... => ..../#..#/.#../#..#
#.#/##./... => ###./..##/#.#./#...
.##/##./... => ...#/#..#/####/...#
###/##./... => ..../#.##/###./...#
.../#.#/... => #.../#.../...#/#...
#../#.#/... => ##../#..#/.##./.##.
.#./#.#/... => ##../.###/#.##/#.#.
##./#.#/... => ##.#/.#.#/#.#./..#.
#.#/#.#/... => .##./...#/...#/.#..
###/#.#/... => ####/..#./###./#.##
.../###/... => #..#/.#.#/#.##/..#.
#../###/... => .#../##../##../#.##
.#./###/... => #.#./...#/#.#./#.##
##./###/... => #.#./#..#/.###/.###
#.#/###/... => ..#./...#/..#./#..#
###/###/... => ##../###./####/....
..#/.../#.. => ##../.#../#.#./.##.
#.#/.../#.. => .##./##.#/.#../#...
.##/.../#.. => ####/..#./#..#/##..
###/.../#.. => #.#./..../..#./####
.##/#../#.. => ..##/..##/.##./##..
###/#../#.. => #..#/#..#/.##./.#..
..#/.#./#.. => #..#/#.##/##../#..#
#.#/.#./#.. => .#.#/.#.#/.##./.#.#
.##/.#./#.. => ####/#.##/..../.###
###/.#./#.. => #..#/.#.#/.##./....
.##/##./#.. => ###./##../#..#/....
###/##./#.. => ...#/.#../.#../....
#../..#/#.. => ###./#.../..##/#...
.#./..#/#.. => .#../#.##/.##./..#.
##./..#/#.. => ..#./.##./..../..##
#.#/..#/#.. => #.#./###./.#.#/#..#
.##/..#/#.. => ####/..##/###./.#.#
###/..#/#.. => ##.#/.##./.###/###.
#../#.#/#.. => ..../#.##/.#.#/#..#
.#./#.#/#.. => .###/..../.###/#.##
##./#.#/#.. => ####/..##/#.##/#.##
..#/#.#/#.. => ..#./..##/####/#...
#.#/#.#/#.. => .##./.#.#/.#.#/##..
.##/#.#/#.. => ##.#/##.#/#.##/.###
###/#.#/#.. => #..#/.##./#.##/.###
#../.##/#.. => ####/...#/..##/##..
.#./.##/#.. => .##./#.##/...#/#...
##./.##/#.. => .##./..#./###./....
#.#/.##/#.. => .#.#/##.#/..#./##.#
.##/.##/#.. => ###./####/.##./####
###/.##/#.. => ..#./##.#/.#../..#.
#../###/#.. => ##../#.##/#.../.#.#
.#./###/#.. => ..#./#.##/...#/...#
##./###/#.. => .###/###./.##./###.
..#/###/#.. => #.../..../#.../#...
#.#/###/#.. => .###/...#/...#/..#.
.##/###/#.. => #.#./..../###./.#.#
###/###/#.. => #..#/#.../#.##/##.#
.#./#.#/.#. => .#../##../..##/#.##
##./#.#/.#. => #.##/#.#./#..#/##.#
#.#/#.#/.#. => #..#/.###/..../###.
###/#.#/.#. => #.#./.#.#/####/#.#.
.#./###/.#. => ..##/..#./..##/###.
##./###/.#. => ##../#.#./#.#./.#..
#.#/###/.#. => ####/.##./####/#.#.
###/###/.#. => ####/..#./####/....
#.#/..#/##. => ###./..#./.#../...#
###/..#/##. => #.#./#.##/#..#/##..
.##/#.#/##. => ..../.#../..../....
###/#.#/##. => .###/..#./#.#./####
#.#/.##/##. => ..../.#.#/#.#./...#
###/.##/##. => ##../.#../.#.#/..##
.##/###/##. => ..#./#.#./##../..##
###/###/##. => ..#./###./#.#./..##
#.#/.../#.# => #.#./..../#.##/.#.#
###/.../#.# => #.##/#.../..##/...#
###/#../#.# => ####/.###/..#./.#.#
#.#/.#./#.# => ..#./#..#/#..#/##..
###/.#./#.# => ..../##../.#.#/##.#
###/##./#.# => ..##/..##/.#../####
#.#/#.#/#.# => ####/...#/#.#./#.#.
###/#.#/#.# => #.##/...#/..#./...#
#.#/###/#.# => #.##/####/#..#/..##
###/###/#.# => .##./.##./.##./.#..
###/#.#/### => .#../..../..../.###
###/###/### => #.#./#.#./###./###."""


pattern = ".#./..#/###"

def rotate2(s):
    rows = s.split("/")
    return ("%s/%s" %
        (rows[1][0] + rows[0][0],
         rows[1][1] + rows[0][1]))

def flipx2(s):
    rows = s.split("/")

    return ("%s/%s" %
        (rows[0][1] + rows[0][0],
         rows[1][1] + rows[1][0]))

def flipy2(s):
    rows = s.split("/")

    return ("%s/%s" %
        (rows[1][0] + rows[1][1],
         rows[0][0] + rows[0][1]))

def permutations2(s):
    ret = set()
    cur = s
    for i in range(4):
        ret.add(cur)
        ret.add(flipx2(cur))
        ret.add(flipy2(cur))
        cur = rotate2(cur)
    return ret


def rotate3(s):
    rows = s.split("/")
    return ("%s/%s/%s" %
        (rows[2][0] + rows[1][0] + rows[0][0],
         rows[2][1] + rows[1][1] + rows[0][1],
         rows[2][2] + rows[1][2] + rows[0][2]))

def flipy3(s):
    rows = s.split("/")
    return ("%s/%s/%s" %
        (rows[2][0] + rows[2][1] + rows[2][2],
         rows[1][0] + rows[1][1] + rows[1][2],
         rows[0][0] + rows[0][1] + rows[0][2]))

def flipx3(s):
    rows = s.split("/")
    return ("%s/%s/%s" %
        (rows[0][2] + rows[0][1] + rows[0][0],
         rows[1][2] + rows[1][1] + rows[1][0],
         rows[2][2] + rows[2][1] + rows[2][0]))

def permutations3(s):
    ret = set()
    cur = s
    for i in range(4):
        ret.add(cur)
        ret.add(flipx3(cur))
        ret.add(flipy3(cur))
        cur = rotate3(cur)
    return ret

def each_ksq(s, k):
    rows = s.split("/")

    ret = []
    for i in range(0,len(rows),k):
        for j in range(0,len(rows),k):
            cursq = ""
            for dx in range(k):
                for dy in range(k):
                    cursq += rows[i+dx][j+dy]
                cursq += "/"
            cursq = cursq[:-1]
            ret.append(cursq)
    return ret

def each_2sq(s):
    pass

def each_sq(s):
    if len(s.split("/")) % 2 == 0:
        return each_ksq(s, 2)
    else:
        return each_ksq(s, 3)

rules = {}

for line in instr.split("\n"):
    lhs, rhs = line.split(" => ")
    rules[lhs] = rhs

#for _ in range(5):
for _ in range(18):
    newsqs = []
    rows = pattern.split("/")
    cellsize = 0
    for sq in each_sq(pattern):
        perms = set()
        if len(rows) % 2 == 0:
            perms = permutations2(sq)
            cellsize = len(rows)/2
        else:
            perms = permutations3(sq)
            cellsize = len(rows)/3

        for perm in perms:
            if perm in rules:
                newsqs.append(rules[perm])
                break
    pattern = ""
    for i in range(cellsize):
        cur = None
        for j in range(cellsize):
            cursq = newsqs[i*cellsize + j]
            if cur is None:
                cur = cursq
            else:
                cursqrows = cursq.split("/")
                currows = cur.split("/")
                buf = ""
                for a,b in zip(currows,cursqrows):
                    buf += (a+b)
                    buf += "/"
                buf = buf[:-1]
                cur = buf
        pattern += cur + "/"
    pattern = pattern[:-1]



#print pattern
cnt = 0
for c in pattern:
    if c == "#":
        cnt += 1
print cnt







